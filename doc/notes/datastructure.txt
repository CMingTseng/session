*** proposed data definition ***

system                              # hostname in session, hostctl, our p-key
 * parent (type system, 1-1)        # parent in session, can be none
 * os (type os, 1-1)                # os selection in hostctl
    * name (type os-name, 1-1)      # name part of os selection in hostctl
    * ver (type ver-number, 1-1)    # version part of os selection in hostctl
    * arch (type arch, 1-1)         # arch part of os selection in hostctl

 * user (type user-id, 1-n)         # an abstract user, used by sessio
    * name (type user-name, 1-n)    # the name of the user, session
    * role (type role, 1-n)         # the role of the user
                    
 * netdev (type device, 1-n)        # an abstract network device
    * mac (type mac-address, 1-1)   # a mac address, used by hostctl
    * ip (type ip-number, 1-n)      # an ip, used by session, hostctl
    * name (type dns-name, 1-n)     # a dns name, used by hostctl
                    
 * service (type service, 1-n)      # an abstract service, used by session
    * name (type svc-name, 1-1)     # the name of the service
    * listen (type ip-number, 0-n)  # the addr(s) the service listens on if any
    * port (type port, 0-n)         # the port(s) of the service if any
    * proto (type protocol, 1-1)    # the protocol the service speaks
    
    * caps (type capability, 1-n)   # the abstract capability delivered
                    

*** example use of definition ***

mirai
 * someilo
 * rhel5x64
    * root
    * rubin
    
    * eth0
       * 00:11:22:33:11:22:33
       * 10.10.10.1
          * mirai.mgmt.rfblx.local
          * svn.mgmt.rfblx.local
    
    * eth1
       * 00:11:22:33:11:22:34
       * 172.16.10.1
          * mirai.scsi.rfblx.local
    
    * ssh
       * 10.10.10.1
       * 22  
       * access, execute
    
    * telnet
       * 10.10.10.1, 172.16.10.1
       * 23
       * access
    
    * kvm
       * none
       * none
       * virtualize
    
    * postgresql
       * 172.16.10.1, 127.0.0.1
       * 5432
       * rdbms


*** open questions ***

how to handle weight or priority? 2 access methods like above, how do
you "prefer ssh, fallback to telnet?" what about multiple ip addresses?
given two reachable addresses, with the same service on both, which to
use? what does this mean in the context of state? when is a host truly
up?

En, stel dat je een doos hebt met dns en dhcp. welke capabilities geven die?

    "register"

Dus een system entity als client kan een register action (capability)
uitvoeren op een system entity die de dhcp en dns services HEEFT. die
kant op zit ik te denken.

Dan heb je zowel client als server kant gedekt. Ik vraag me alleen af:
waar sla ik op dat ik ergens geregistered ben? bij de client of by de
server entity? aanschouw:

client1:
 * eth0
    * mac 11:22:11:22:11:22
    * ip 1.2.3.4

 * registered
    * dhcp@server1        <-? this the way?

server1:
 * srv dhcp
    * registered
       * client1          <-? or this?
       * client2

Of misschien beide? want "vanaf waar kijk je"? ik zou best graag alleen
aan systeem gemini willen vragen: "wat heb je en wie kent je"
Aan de andere kant zou ik het logisch vinden om aan server1 te vragen:
"wie maakt gebruik van je services". Food for thought.

