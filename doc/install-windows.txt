Installing Session on Windows systems

Session has a couple of dependencies which need to be available on the system
on which you want to run the main "session" command. Session supports Windows, 
Mac OS X and Linux as a client platform and these platforms have varying 
dependencies for session. In the instructions below, we will describe the 
installation steps and dependencies for the Windows platform. If you follow 
these steps, you should have no troubles with running session!

NOTE! On the website (http://www.raaftech.nl/session) we've also listed the
dependencies described below, with links to where to get them! Make sure to
check it out!

1: Make sure you have a Windows 2000, 2003, XP, Vista or 7 system. We've 
   tested mostly with Windows 2000, XP and 7 but we expect other Windows
   versions to be equally easy to run on.
   Since session is a bash shell script, make sure you also install the
   Cygwin environment!

2: Session's access command opens new PuTTY windows when something has
   an ssh access method. Additionally, it uses the pscp and plink PuTTY 
   commands. for various things within session. Make sure you install the
   latest version of PuTTY and make sure it is available on your path!

3: To test for open ports on a system when determining a system's state, the
   program uses Microsoft's PortQry tool. Make sure you have it installed
   and make sure it's available on your path!

4: When session accesses systems which have an rdp access method, it uses the
   mstsc command to facilitate the connection. Make sure you have it installed 
   on your system. Since at least Windows XP SP2, this command is installed
   by default. For older/other versions of Windows, you might have to install
   it yourself.

5: The session command functionality, when talking to a windows box, uses the
   psexec program to do so.  PsExec is a part of the Microsoft SysInternals
   Suite applications. Make sure you have at least the psexec commands and
   make sure it is available on your path.

6: The session send functionality, when talking to a windows box, uses the
   robocopy program to do so. Make sure you have the robocopy command 
   installed on your system. We've seen that robocopy is installed by 
   default on Windows Vista and on Windows 7. On older/other versions of
   Windows, you might have to install it manually.

7: Install the session command somewhere in your path, like /usr/local/bin or
   anywhere else you prefer. You are now ready to run session for the first
   time!

8: Type 'session' at the command prompt. The session command will detect that
   it's being run for the first time and will do a search for all its needed
   dependencies. Next to that, it will create a default ~/.session directory
   layout with an empty session.conf (under ~/.session/cfg/session.conf).

9: Copy the template files in the distibution archive's 'tpl' directory to
   your personal template directory under ~/.session/tpl . These files use
   the .stf (session template file) extention.


If session did not give an error about not being able to find any of its 
dependencies, the above run of the session command will show you the standard
help output. You are now ready to add systems to your session.conf! You can
use the "session addconf" and "session delconf" commands to do so (see the
standard session help output for addconf and delconf examples). Ofcourse, you
can also edit the ~/.session/cfg/session.conf file directly.

 
